# coding: utf-8

"""
    IGVF Project API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from pydantic import Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from typing_extensions import Self


class ContentType(int, Enum):
    """
    The type of content in the file.
    """

    """
    allowed enum values
    """
    NUMBER_'barcode to element mapping' = 'barcode to element mapping'
    NUMBER_'barcode to sample mapping' = 'barcode to sample mapping'
    NUMBER_'differential gene expression quantifications' = 'differential gene expression quantifications'
    NUMBER_'differential transcript expression quantifications' = 'differential transcript expression quantifications'
    NUMBER_'editing templates' = 'editing templates'
    NUMBER_'element quantifications' = 'element quantifications'
    NUMBER_'elements reference' = 'elements reference'
    NUMBER_'fold change over control' = 'fold change over control'
    NUMBER_'guide quantifications' = 'guide quantifications'
    NUMBER_'guide RNA sequences' = 'guide RNA sequences'
    NUMBER_'MPRA sequence designs' = 'MPRA sequence designs'
    NUMBER_'peaks' = 'peaks'
    NUMBER_'prime editing guide RNA sequences' = 'prime editing guide RNA sequences'
    NUMBER_'protein to protein interaction score' = 'protein to protein interaction score'
    NUMBER_'tissue positions' = 'tissue positions'
    NUMBER_'sample sort parameters' = 'sample sort parameters'
    NUMBER_'sequence barcodes' = 'sequence barcodes'
    NUMBER_'SNP effect matrix' = 'SNP effect matrix'
    NUMBER_'variants' = 'variants'
    NUMBER_'variant effects' = 'variant effects'
    NUMBER_'variant to element mapping' = 'variant to element mapping'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ContentType from a JSON string"""
        return cls(json.loads(json_str))


